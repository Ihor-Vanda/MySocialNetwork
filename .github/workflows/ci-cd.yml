name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    environment: dev
    runs-on: ubuntu-latest

    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      SQL_SERVER_PASSWORD: ${{ secrets.SQL_SERVER_PASSWORD }}
      RABBITMQ_HOST: ${{secrets.RABBITMQ_HOST}}
      RABBITMQ_USERNAME: ${{secrets.RABBITMQ_USERNAME}}
      RABBITMQ_PASSWORD: ${{secrets.RABBITMQ_PASSWORD}}
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      DB_USER: ${{secrets.DB_USER}}
      DB_HOST: ${{secrets.DB_HOST}}
      DB_PORT: ${{secrets.DB_PORT}}
      AUTH_DB_NAME: ${{secrets.AUTH_DB_NAME}}
      USER_DB_NAME: ${{secrets.USER_DB_NAME}}
      POST_DB_NAME: ${{secrets.POST_DB_NAME}}

    steps:
      - name: Print RabbitMQ environment variables
        run: |
          echo "RABBITMQ_HOST: ${RABBITMQ_HOST}"
          echo "RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}"
          if [ -z "${RABBITMQ_PASSWORD}" ]; then
            echo "RABBITMQ_PASSWORD is not set or empty";
          else
            echo "RABBITMQ_PASSWORD is set";
          fi

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Build Docker images for tests
        run: |
          docker build -f ./AuthService/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-auth-service:latest .
          docker build -f ./UserProfileService/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-user-profile-service:latest .
          docker build -f ./PostService/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-post-service:latest .
          docker build -f ./ApiGateway/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-api-gateway-service:latest .

      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal

      # - name: Save Docker images as artifacts
      #   run: |
      #     docker save -o auth-service.tar ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-auth-service:latest
      #     docker save -o user-profile-service.tar ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-user-profile-service:latest
      #     docker save -o post-service.tar ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-post-service:latest
      #     docker save -o api-gateway-service.tar ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-api-gateway-service:latest

      # - name: Upload Docker images as artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: docker-images
      #     path: |
      #       auth-service.tar
      #       user-profile-service.tar
      #       post-service.tar
      #       api-gateway-service.tar

  # push-docker:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Docker images artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: docker-images

  #     - name: Load Docker images
  #       run: |
  #         docker load -i auth-service.tar
  #         docker load -i user-profile-service.tar
  #         docker load -i post-service.tar
  #         docker load -i api-gateway-service.tar

  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Verify Docker images before push
  #       run: |
  #         docker image ls ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-auth-service:latest
  #         docker image ls ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-user-profile-service:latest
  #         docker image ls ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-post-service:latest
  #         docker image ls ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-api-gateway-service:latest

  #     - name: Push Docker images
  #       run: |
  #         docker push ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-auth-service:latest
  #         docker push ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-user-profile-service:latest
  #         docker push ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-post-service:latest
  #         docker push ${{ secrets.DOCKER_USERNAME }}/mysocialnetwork-api-gateway-service:latest

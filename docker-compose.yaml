services:
  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: MySocNet
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U MySocNet"]
      interval: 30s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db

  broker:
    image: rabbitmq:3-management
    container_name: broker
    ports:
      - "5672:5672"
      - "15672:15672"

  # elasticsearch:
  #   image: elasticsearch:8.17.4
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - xpack.security.http.ssl.enabled=false
  #   ports:
  #     - "9200:9200"

  # kibana:
  #   image: kibana:8.17.4
  #   container_name: kibana
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   ports:
  #     - "5601:5601"
  #   depends_on:
  #     - elasticsearch

  api:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      auth:
        condition: service_healthy
      user:
        condition: service_healthy
      post:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    image: "${DOCKER_HUB_USERNAME}/mysocialnetwork-api-gateway-service:latest"

  auth:
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    image: "${DOCKER_HUB_USERNAME}/mysocialnetwork-auth-service:latest"

  user:
    build:
      context: .
      dockerfile: UserProfileService/Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    image: "${DOCKER_HUB_USERNAME}/mysocialnetwork-user-profile-service:latest"

  post:
    build:
      context: .
      dockerfile: PostService/Dockerfile
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    image: "${DOCKER_HUB_USERNAME}/mysocialnetwork-post-service:latest"

volumes:
  postgres_data:

services:
  api:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      auth:
        condition: service_healthy
      user:
        condition: service_healthy
      post:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s
    image: "${DOCKER_HUB_USERNAME}/mysocialnetwork-api-gateway-service:latest"

  auth:
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 60s
      timeout: 3s
      retries: 3
      start_period: 10s
    image: "${DOCKER_HUB_USERNAME}/mysocialnetwork-auth-service:latest"

  user:
    build:
      context: .
      dockerfile: UserProfileService/Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 60s
      timeout: 3s
      retries: 3
      start_period: 10s
    image: "${DOCKER_HUB_USERNAME}/mysocialnetwork-user-profile-service:latest"

  post:
    build:
      context: .
      dockerfile: PostService/Dockerfile
    ports:
      - "5003:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 60s
      timeout: 3s
      retries: 3
      start_period: 10s
    image: "${DOCKER_HUB_USERNAME}/mysocialnetwork-post-service:latest"

  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "${SQL_SERVER_PASSWORD}"
      ACCEPT_EULA: "Y"
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P "${SQL_SERVER_PASSWORD}" -Q "SELECT 1" || exit 1
      interval: 60s
      timeout: 3s
      retries: 10
      start_period: 10s
    ports:
      - "1433:1433"
    volumes:
      - sql_data:/var/opt/mssql

  elasticsearch:
    image: elasticsearch:8.17.4
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    ports:
      - "9200:9200"

  kibana:
    image: kibana:8.17.4
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  broker:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db

volumes:
  sql_data:
